name: Publish

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"
  RUSTDOCFLAGS: '--deny warnings'
  MINIMUM_SUPPORTED_RUST_VERSION: 1.85.0
  DOCKER_REGISTRY: ghcr.io

permissions:
  id-token: write
  packages: write
  contents: write
  attestations: write
  pull-requests: write

on:
  workflow_dispatch:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  workflow_call:
#  workflow_run:
#    workflows: ['Tag']
#    types:
#      - completed

jobs:
  version:
    name: Determine version to publish
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - id: release
        run: echo "version=$(cargo pkgid --manifest-path crates/bin/Cargo.toml | cut -d '@' -f2)" >> "$GITHUB_OUTPUT"

  create-release:
    runs-on: ubuntu-latest
    name: Create release
    needs: version
    steps:
      - uses: actions/checkout@v4
      - name: Create github release
        run: gh release create "v${{ needs.version.outputs.version }}" --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  changelog:
    needs: [version, create-release]
    uses: ./.github/workflows/changelog.yml
    name: Create changelog
    secrets: inherit

  build-and-publish:
    needs: [version, create-release]
    name: Build and publish
    runs-on: ${{ matrix.platforms.os }}
    strategy:
      matrix:
        platforms:
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            features: ""
    steps:
      - uses: actions/checkout@v4
      - uses: houseabsolute/actions-rust-cross@v1
        with:
          target: ${{ matrix.platforms.target }}
          args: "--verbose --locked --release ${{ matrix.platforms.features }}"
          strip: true
      
      - name: Setup variables
        id: variables
        shell: bash
        run: |
          name="$(cargo metadata --manifest-path crates/bin/Cargo.toml --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="yozefu").targets[0].name')"
          source=target/${{ matrix.platforms.target }}/release/${name}
          archive="yozefu-${{matrix.platforms.target }}"
          subjectName="${name}-${{matrix.platforms.target }}-${{ needs.version.outputs.version }}"
          binaryName="${subjectName}"
          destination="dist/${binaryName}"
          if [ "${{ matrix.platforms.os }}" = "windows-latest" ]; then
             source=${source}.exe
             binaryName=${binaryName}.exe
             destination="dist/${binaryName}"
          fi
          {
            echo "name=${name}"
            echo "source=${source}"
            echo "archive=${archive}"
            echo "subjectName=${subjectName}"
            echo "destination=${destination}"
            echo "binaryName=${binaryName}"
          } >> "$GITHUB_OUTPUT"

      - name: Attest
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "${{ steps.variables.outputs.source }}"
          subject-name: "${{ steps.variables.outputs.archive }}-${{ needs.version.outputs.version }}"

      - name: Create temp dir
        run: mkdir -p dist

      - name: Rename binary
        shell: bash
        run: mv "${{ steps.variables.outputs.source }}" "${{ steps.variables.outputs.destination }}"

      - name: Build archive for Windows
        shell: bash
        working-directory: ./dist
        if: matrix.platforms.os == 'windows-latest'
        run: 7z a "${{ steps.variables.outputs.archive }}.zip" "${{ steps.variables.outputs.binaryName }}"

      - name: Build archive for unix systems
        if: matrix.platforms.os != 'windows-latest'
        shell: bash
        working-directory: ./dist
        run: |
          tar cvzf "${{ steps.variables.outputs.archive }}.tar.gz" "${{ steps.variables.outputs.binaryName }}" 
      - name: Clean release directory
        shell: bash
        run: rm -f "dist/${{ steps.variables.outputs.binaryName }}"

      - name: cargo install cargo-cyclonedx
        run: cargo install cargo-cyclonedx

      - name: Generate SBOM
        run: cargo cyclonedx --describe binaries --format json ${{ matrix.platforms.features }} --target ${{ matrix.platforms.target }}

      - name: Rename SBOM
        shell: bash
        run: mv crates/bin/${{ steps.variables.outputs.name }}_bin.cdx.json "dist/${{ steps.variables.outputs.archive }}.cdx.json"

      - name: Upload binary
        shell: bash
        run: gh release upload "v${{ needs.version.outputs.version }}" dist/* --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
